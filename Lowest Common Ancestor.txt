#include <iostream>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <fstream>
#include <algorithm>
#include <iterator>
#include <vector>
#include <iomanip>
#include <bitset>
#include <limits.h>
#include <cmath>
#include <unordered_map>

#define int long long
#define ii pair<int,int>
using namespace std;

const int ms = 2e5 + 10;
const int inf = 1e15;
vector<int> g[ms];
int par[ms][29], lvl[ms];

void dfs(int v, int p, int l = 0) {
  lvl[v] = l;
  par[v][0] = p;
  for(int k = 1; k <= 20; k++) {
    par[v][k] = par[par[v][k-1]][k-1];
}
  for(int i=0; i<g[v].size(); i++) {
    int u = g[v][i];
    if(u != p) dfs(u, v, l + 1);
  }
}

int lca(int a, int b) {
  if(lvl[b] > lvl[a]) swap(a, b);
  for(int i = 20; i >= 0; i--) {
    if(lvl[a] - (1 << i) >= lvl[b]){
        a = par[a][i];
    }
  }
  if(a == b) return a;
  for(int i = 20; i >= 0; i--) {
    if(par[a][i] != par[b][i]){
        a = par[a][i], b = par[b][i];
    }
  }

  return par[a][0];
}


int32_t main(){
    cin.tie(0);
    ios::sync_with_stdio(0);

    int r;
    cin >> r;
    for(int i=1; i<r; i++){
        int u , v;
        cin >> u >> v;
        u--, v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int q;
    cin >> q;
    dfs(0,0);

    while (q--){
        int a,b,r;
        cin >> r >> a >> b;
        a--, b--, r--;
        int x, y, z;
        x = lca(a,b), y = lca(b,r), z =  lca(a,r);

        cout <<  (x^y^z) + 1  << '\r';
    }




    return 0;
}
